// Generated by CoffeeScript 1.6.3
/* Models*/


(function() {
  var AdventureView, Command, CommandHistory, CommandView, TextField, _ref, _ref1, _ref2, _ref3, _ref4,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Command = (function(_super) {
    __extends(Command, _super);

    function Command() {
      _ref = Command.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Command.prototype.url = "{name}/run";

    return Command;

  })(Backbone.Model);

  /* Collections*/


  CommandHistory = (function(_super) {
    __extends(CommandHistory, _super);

    function CommandHistory() {
      _ref1 = CommandHistory.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    CommandHistory.prototype.model = Command;

    CommandHistory.prototype.url = "{name}/history";

    return CommandHistory;

  })(Backbone.Collection);

  /* Views*/


  AdventureView = (function(_super) {
    __extends(AdventureView, _super);

    function AdventureView() {
      this.render = __bind(this.render, this);
      this.createAndRender = __bind(this.createAndRender, this);
      this.addCommand = __bind(this.addCommand, this);
      this.initialize = __bind(this.initialize, this);
      _ref2 = AdventureView.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    AdventureView.prototype.views = [];

    AdventureView.prototype.initialize = function(options) {
      this.historyView = $(document.createElement('div'));
      this.historyView.attr("id", 'history-view');
      this.$el.append(this.historyView);
      this.textEntry = $(document.createElement('div'));
      this.textEntry.attr("id", 'text-entry');
      this.$el.append(this.textEntry);
      this.history = options.history;
      this.history.bind('add', this.addCommand);
      this.history.bind('change', this.render);
      this.history.bind('reset', this.createAndRender);
      return this.render();
    };

    AdventureView.prototype.addCommand = function(cmd) {
      this.views.push(new CommandView({
        model: cmd
      }));
      return this.render();
    };

    AdventureView.prototype.createAndRender = function(collection) {
      var _this = this;
      _.each(collection.models, function(cmd) {
        return _this.addCommand(cmd);
      });
      return this.render;
    };

    AdventureView.prototype.render = function() {
      var _this = this;
      this.historyView.innerHtml = '';
      _.each(this.views, function(view) {
        return _this.historyView.append(view.render().el);
      });
      this.historyView.scrollTop(this.historyView.prop('scrollHeight'));
      this.historyView.find("img").load(function() {
        return _this.historyView.scrollTop(_this.historyView.prop('scrollHeight'));
      });
      return this;
    };

    return AdventureView;

  })(Backbone.View);

  TextField = (function(_super) {
    __extends(TextField, _super);

    function TextField() {
      this.render = __bind(this.render, this);
      this.cursorSplitText = __bind(this.cursorSplitText, this);
      this.keyUp = __bind(this.keyUp, this);
      this.keyDown = __bind(this.keyDown, this);
      this.keyPress = __bind(this.keyPress, this);
      this.getHistoryCommands = __bind(this.getHistoryCommands, this);
      this.submit = __bind(this.submit, this);
      this.initialize = __bind(this.initialize, this);
      _ref3 = TextField.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    TextField.cursorImgSrc = "/static/imgs/cursor.gif";

    TextField.prototype.cursorHtml = "<img src='" + TextField.cursorImgSrc + "' id='cursor' />";

    TextField.prototype.enteredText = "";

    TextField.prototype.cursorPosition = 0;

    TextField.prototype.initialize = function(options) {
      _.bindAll(this);
      $(document).bind('keypress', this.keyPress);
      $(document).bind('keydown', this.keyDown);
      $(document).bind('keyup', this.keyUp);
      this.history = options.history;
      this.items = options.items;
      this.historyPosition = this.history.length - 1;
      return this.render();
    };

    TextField.prototype.submit = function(text) {
      var command;
      command = new Command({
        command: text,
        response: ""
      });
      this.history.add(command);
      this.historyPosition = this.history.length;
      return command.save();
    };

    TextField.prototype.getHistoryCommands = function() {
      return this.history.collect((function(model) {
        return model.get("command");
      }));
    };

    TextField.prototype.keyPress = function(event) {
      var char, postCursor, preCursor, printable, _ref4;
      char = String.fromCharCode(event.which);
      printable = /^[-a-zA-Z0-9 ]$/.test(char);
      if (!printable) {
        return;
      }
      _ref4 = this.cursorSplitText(), preCursor = _ref4[0], postCursor = _ref4[1];
      this.enteredText = preCursor + char + postCursor;
      this.cursorPosition += 1;
      return this.render();
    };

    TextField.prototype.keyDown = function(event) {
      var backspaceKeyCode, deleteKeyCode, downKeyCode, leftKeyCode, postCursor, preCursor, rightKeyCode, textLen, upKeyCode, _ref4;
      deleteKeyCode = 46;
      backspaceKeyCode = 8;
      leftKeyCode = 37;
      upKeyCode = 38;
      rightKeyCode = 39;
      downKeyCode = 40;
      textLen = this.enteredText.length;
      _ref4 = this.cursorSplitText(), preCursor = _ref4[0], postCursor = _ref4[1];
      if (this.historyPosition < 0 || this.historyPosition > this.history.length) {
        this.historyPosition = this.history.length;
      }
      switch (event.keyCode) {
        case leftKeyCode:
          if (this.cursorPosition !== 0) {
            this.cursorPosition--;
          }
          break;
        case rightKeyCode:
          if (this.cursorPosition !== textLen) {
            this.cursorPosition++;
          }
          break;
        case deleteKeyCode:
          if (this.cursorPosition !== textLen) {
            this.enteredText = preCursor + postCursor.substring(1);
          }
          break;
        case backspaceKeyCode:
          event.preventDefault();
          if (this.cursorPosition !== 0) {
            this.enteredText = preCursor.substring(0, preCursor.length - 1) + postCursor;
            this.cursorPosition--;
          }
          break;
        case upKeyCode:
          if (this.historyPosition > 0) {
            this.historyPosition--;
            this.enteredText = this.getHistoryCommands()[this.historyPosition];
            this.cursorPosition = this.enteredText.length;
          }
          break;
        case downKeyCode:
          if (this.historyPosition < this.getHistoryCommands().length - 1) {
            this.historyPosition++;
            this.enteredText = this.getHistoryCommands()[this.historyPosition];
            this.cursorPosition = this.enteredText.length;
          } else {
            this.historyPosition = this.history.length;
            this.enteredText = "";
            this.cursorPosition = 0;
          }
      }
      return this.render();
    };

    TextField.prototype.keyUp = function(event) {
      var enterKeyCode, submitting;
      enterKeyCode = 13;
      if (event.which === enterKeyCode) {
        submitting = this.enteredText;
        if (submitting.length > 0) {
          this.enteredText = "";
          this.cursorPosition = 0;
          this.submit(submitting);
          return this.render();
        }
      }
    };

    TextField.prototype.cursorSplitText = function() {
      var postCursor, preCursor;
      preCursor = this.enteredText.substring(0, this.cursorPosition);
      postCursor = this.enteredText.substring(this.cursorPosition);
      return [preCursor, postCursor];
    };

    TextField.prototype.render = function() {
      var postCursor, preCursor, template, text, _ref4;
      _ref4 = this.cursorSplitText(), preCursor = _ref4[0], postCursor = _ref4[1];
      text = preCursor + this.cursorHtml + postCursor;
      template = _.template($('#text-entry-template').html(), {
        text: text
      });
      this.$el.html(template);
      return this;
    };

    return TextField;

  })(Backbone.View);

  CommandView = (function(_super) {
    __extends(CommandView, _super);

    function CommandView() {
      this.render = __bind(this.render, this);
      this.initialize = __bind(this.initialize, this);
      _ref4 = CommandView.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    CommandView.prototype.tagName = 'div';

    CommandView.prototype.initialize = function() {
      return this.model.bind('change', this.render);
    };

    CommandView.prototype.render = function() {
      var response, template;
      response = this.model.attributes.response;
      if (response.match(/^error:/)) {
        response = "<span class='error'>" + response + "</span>";
      }
      template = _.template($('#command-template').html(), {
        command: this.model.attributes.command,
        response: response.replace(/\n/g, "<br/>")
      });
      this.$el.html(template);
      return this;
    };

    return CommandView;

  })(Backbone.View);

  this.loadGame = function() {
    var adventureView, history, textField;
    history = new CommandHistory([]);
    adventureView = new AdventureView({
      el: $('#main'),
      history: history
    });
    textField = new TextField({
      el: adventureView.textEntry,
      history: history
    });
    return history.fetch({
      reset: true
    });
  };

}).call(this);
